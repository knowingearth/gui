# 日志输出到控制台
writer1        = console
# 日志输出级别 default trace
# trace, debug, info, warn, error
# off 不输出
# level@com.y.gui.controller.AreaController = debug 也可以单独指定包或类的日志输出级别，只能全局定义
writer1.level  = info
# 日志输出格式
writer1.format = {date: yyyy-MM-dd HH:mm:ss.SSS} {level}: [{thread}]{class}.{method}()\t{message|indent=4}

# 警告和错误写入标准错误流（System.err），其他严重级别写入标准输出流（System.out）
# 由2.3版本开始，可以使用自定义标准错误流的阈值
# 如writer.stream=err@INFO导致将所有严重级别为INFO、WARN和ERROR的日志条目写入标准错误流，并将TRACE和DEBUG的日志条目写到标准输出流
# writer3.stream = err 的默认值为 writer3.level
writer1.stream = err@WARN

# 2.2版本开始支持日志打标记
# 只输出打标记的日志：Logger.tag("sys").info("日志内容");
# 可以配置多个标记：writer1.tag = sys, gui, a, b, c
# 从2.3版本开始，可以为标记定义日志级别：writer1.tag = sys@warn, gui, a@error, b, c
# 减号标识 只输出未打标记的日志：writer1.tag = -
# writer1.tag = sys



# 日志输出到文件
writer2          = file
writer2.level    = info
writer2.file     = log.txt
writer2.format   = {date: yyyy-MM-dd HH:mm:ss.SSS} {level}: [{thread}]{class}.{method}()\t{message|indent=4}
# US-ASCII, ISO-8859-1, UTF-8, UTF-16
writer2.charset  = UTF-8
# default false
writer2.append   = true
# 开启缓冲输出，新的日志条目被写入缓冲区然后输出到日志文件，效率更高
# default false
writer2.buffered = true


# 输出日志到库表
writer3                 = jdbc
writer3.level           = error
writer3.url             = jdbc:mysql://localhost:3306/gui_guang?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
writer3.schema          = public
writer3.table           = gui_log
writer3.user            = root
writer3.password        = 123456
writer3.reconnect       = true
writer3.batch           = true
writer3.field.level     = {level}
writer3.field.target    = {class}.{method}()
writer3.field.message   = {message}